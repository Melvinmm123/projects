{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background and Context:\n",
    "\n",
    "The ability to process visual information using machine learning algorithms can be very useful as demonstrated in various applications. The Street View House Numbers (SVHN) dataset is one of the most popular ones. It has been used in neural networks created by Google to read house numbers and match them to their geolocations. This is a great benchmark dataset to play with, learn and train models that accurately identify street numbers, and incorporate them into all sorts of projects.\n",
    "\n",
    "## Objective:\n",
    "\n",
    "In this project, we will use a dataset with images centered around a single digit (many of the images do contain some distractors at the sides). Although we are taking a sample of the data which is simple, it is more complex than MNIST because of the distractors. Given the dataset, our aim is to build a model that can identify house numbers in an image.\n",
    "\n",
    "## Dataset:\n",
    "\n",
    "* The dataset has the following features:\n",
    "* Number of classes: 10\n",
    "* Training data: 42000 images\n",
    "* Testing data: 18000 images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mounting the drive \n",
    "#from google.colab import drive\n",
    "#drive.mount('/content/gdrive')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.utils import np_utils\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "\n",
    "from tensorflow.keras.models import Sequential #sequential api for sequential model \n",
    "from tensorflow.keras.layers import Dense,Embedding, Dropout, Flatten #importing different layers \n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Activation, Input, LeakyReLU,Activation\n",
    "from tensorflow.keras import backend as K\n",
    "from tensorflow.keras.utils import to_categorical #to perform one-hot encoding \n",
    "# from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n",
    "\n",
    "\n",
    "from keras.callbacks import EarlyStopping  #regularization method to prevent the overfitting\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras import losses, optimizers\n",
    "\n",
    "# fix random seed for reproducibility\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "\n",
    "\n",
    "h5f = h5py.File('SVHN_single_grey1.h5', 'r')\n",
    "\n",
    "# Load the training, test and validation set\n",
    "X_train = h5f['X_train'][:]\n",
    "y_train = h5f['y_train'][:]\n",
    "\n",
    "X_test = h5f['X_test'][:]\n",
    "y_test = h5f['y_test'][:]\n",
    "\n",
    "# Close this file\n",
    "h5f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explanotary data analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 32, 32)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X_train has 42000 images having shape 32X32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000,)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "y_train has 42000 values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18000,)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "y-test has 18000 values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18000, 32, 32)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X_test has 18000 images with size 32X32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x72 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label for each of the above image: [2 6 7 4 4 0 3 0 7 3]\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "## plotting the first 10 images \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 1))\n",
    "\n",
    "for i in range(10):\n",
    "    plt.subplot(1, 10, i+1)\n",
    "    plt.imshow(X_train[i], cmap=\"gray\")\n",
    "    plt.axis('off')\n",
    "    \n",
    "plt.show()\n",
    "\n",
    "print('label for each of the above image: %s' % (y_train[0:10]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the images are shown with their corresponding labels "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 33.0704,  30.2601,  26.852 , ...,  71.4471,  58.2204,  42.9939],\n",
       "       [ 25.2283,  25.5533,  29.9765, ..., 113.0209, 103.3639,  84.2949],\n",
       "       [ 26.2775,  22.6137,  40.4763, ..., 113.3028, 121.775 , 115.4228],\n",
       "       ...,\n",
       "       [ 28.5502,  36.212 ,  45.0801, ...,  24.1359,  25.0927,  26.0603],\n",
       "       [ 38.4352,  26.4733,  23.2717, ...,  28.1094,  29.4683,  30.0661],\n",
       "       [ 50.2984,  26.0773,  24.0389, ...,  49.6682,  50.853 ,  53.0377]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[0]# pixel values of the first image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image 1 in the Folder\n",
      "[[ 33.0704  30.2601  26.852  ...  71.4471  58.2204  42.9939]\n",
      " [ 25.2283  25.5533  29.9765 ... 113.0209 103.3639  84.2949]\n",
      " [ 26.2775  22.6137  40.4763 ... 113.3028 121.775  115.4228]\n",
      " ...\n",
      " [ 28.5502  36.212   45.0801 ...  24.1359  25.0927  26.0603]\n",
      " [ 38.4352  26.4733  23.2717 ...  28.1094  29.4683  30.0661]\n",
      " [ 50.2984  26.0773  24.0389 ...  49.6682  50.853   53.0377]]\n",
      "Resolution\n",
      "(32, 32)\n"
     ]
    }
   ],
   "source": [
    "print(\"Image 1 in the Folder\")\n",
    "print(X_train[0])# pixel values of the first image \n",
    "print(\"Resolution\")\n",
    "print(X_train[0].shape)# resolution of X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[86.9591, 87.0685, 88.3735, ..., 91.8014, 89.7477, 92.5302],\n",
       "       [86.688 , 86.9114, 87.4337, ..., 90.7306, 87.204 , 88.5629],\n",
       "       [85.9654, 85.8145, 85.9239, ..., 63.8626, 59.8199, 54.8805],\n",
       "       ...,\n",
       "       [90.2236, 91.0448, 93.4637, ..., 55.3535, 48.5822, 44.0557],\n",
       "       [90.6427, 90.4039, 90.937 , ..., 78.2696, 77.4977, 74.27  ],\n",
       "       [88.0236, 88.1977, 86.6709, ..., 75.2206, 76.6396, 79.2865]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[1]# pixel value of the second image "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pre-Processing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reshaping according to the problem \n",
    "X_train1 = X_train.reshape(X_train.shape[0], 32,32,1)\n",
    "X_test1 = X_test.reshape(X_test.shape[0], 32,32,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalize inputs from 0-255 to 0-1\n",
    "X_train2 = X_train1 / 255.0\n",
    "X_test2 = X_test1 / 255.0\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# one hot encoding \n",
    "y_train1= np_utils.to_categorical(y_train)\n",
    "y_test1 = np_utils.to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One value of y_train: [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(\"One value of y_train:\", y_train1[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 10)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train1.shape#checking y_train1 shape "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "y_train shape is 42000 rows with 10 columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 32, 32, 1)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train2.shape#checking X_train2 shape \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X_train2 has been accurately reshaped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18000, 32, 32, 1)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test2.shape#checking X_test2 shape "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "X_test2 has been accurately reshaped "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building the model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-12-07 10:57:01.471353: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import Conv2D\n",
    "\n",
    "model = tf.keras.models.Sequential()\n",
    "model.add(Conv2D(filters=32, kernel_size=3, activation=\"relu\", input_shape=(32, 32, 1)))\n",
    "model.add(Conv2D(filters=32, kernel_size=3, activation=\"relu\"))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation=\"relu\"))\n",
    "model.add(Dense(10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-12-07 10:57:01.807157: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "919/919 [==============================] - 63s 68ms/step - loss: 0.9831 - accuracy: 0.6910 - val_loss: 0.6129 - val_accuracy: 0.8223\n",
      "Epoch 2/10\n",
      "919/919 [==============================] - 74s 81ms/step - loss: 0.4927 - accuracy: 0.8547 - val_loss: 0.5464 - val_accuracy: 0.8397\n",
      "Epoch 3/10\n",
      "919/919 [==============================] - 73s 79ms/step - loss: 0.3785 - accuracy: 0.8869 - val_loss: 0.4937 - val_accuracy: 0.8593\n",
      "Epoch 4/10\n",
      "919/919 [==============================] - 72s 78ms/step - loss: 0.3022 - accuracy: 0.9085 - val_loss: 0.4781 - val_accuracy: 0.8632\n",
      "Epoch 5/10\n",
      "919/919 [==============================] - 66s 71ms/step - loss: 0.2351 - accuracy: 0.9285 - val_loss: 0.5340 - val_accuracy: 0.8599\n",
      "Epoch 6/10\n",
      "919/919 [==============================] - 66s 72ms/step - loss: 0.1808 - accuracy: 0.9444 - val_loss: 0.6104 - val_accuracy: 0.8444\n",
      "Epoch 7/10\n",
      "919/919 [==============================] - 67s 73ms/step - loss: 0.1360 - accuracy: 0.9583 - val_loss: 0.6203 - val_accuracy: 0.8603\n",
      "Epoch 8/10\n",
      "919/919 [==============================] - 62s 67ms/step - loss: 0.1103 - accuracy: 0.9663 - val_loss: 0.6470 - val_accuracy: 0.8708\n",
      "Epoch 9/10\n",
      "919/919 [==============================] - 68s 74ms/step - loss: 0.0813 - accuracy: 0.9750 - val_loss: 0.7329 - val_accuracy: 0.8622\n",
      "Epoch 10/10\n",
      "919/919 [==============================] - 69s 75ms/step - loss: 0.0656 - accuracy: 0.9793 - val_loss: 0.7939 - val_accuracy: 0.8614\n"
     ]
    }
   ],
   "source": [
    "# Compile the model\n",
    "model.compile(loss=\"categorical_crossentropy\", metrics=[\"accuracy\"], optimizer=\"adam\")\n",
    "\n",
    "# Fit the model\n",
    "history=model.fit( x=X_train2, y=y_train1, batch_size=32, epochs=10, validation_split = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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lR/96EfRDqVTSgQiIhG0cuXKaIdwQmojEBGJcUoEIiIxTolARCTGKRGIiMQ4JQIRkRinRCAiMSUtLS3aIfQ4un1URLrOf38T9qzt2mMOnQqf/kHXHrMHqK+v7zH9DumKQER6tXvvvZdHHnmkef6BBx7gu9/9LvPnz2fGjBlMnTqV3/72t2Edq6qqqtP9nn766ebuI2688UYA9u7dyxVXXEFhYSGFhYW88847bNu2jSlTpjTv96//+q888MADAMybN4/77ruPuXPn8uCDD/K73/2Os88+m+nTp/OJT3yCvXv3NsexcOFCpk6dyrRp03jxxRf52c9+xt1339183Mcff5x77rnnlH+3Nty9V71mzpzpItJzfPjhh1H9/Pfee8/nzJnTPD9x4kTfvn27l5eXu7t7aWmpjxkzxhsbG93dPTU1tdNj1dXVdbjfBx984OPGjfPS0lJ3dy8rK3N392uvvdZ//OMfu7t7fX29Hzp0yLdu3eqTJ09uPuYPf/hDv//++93dfe7cuX7rrbc2rztw4EBzXI8//rjfc8897u7+jW98w++8884221VVVfno0aO9trbW3d1nz57ta9as6fB7dPRvAqzwTsrVnnFdIiJyiqZPn86+ffsoKSmhtLSU7OxscnNzufvuu1myZAlxcXHs2rWLvXv3MnTo0OMey9257777jtnv9ddf5+qrr2bQoEFAy1gDr7/+evP4AvHx8WRmZp5woJumzu8AiouLue6669i9eze1tbXNYyd0NmbCRRddxCuvvMLEiROpq6tj6tSpJ/lrdUyJQER6vauvvpoXXniBPXv2sGDBAp599llKS0tZuXIliYmJjBw58pgxBjrS2X7eyVgDHUlISKCxsbF5/nhjG9xxxx3cc889fPazn+WNN95orkLq7PO++tWv8v3vf58JEyZ06UhnaiMQkV5vwYIFPP/887zwwgtcffXVlJeXM3jwYBITE1m8eDHbt28P6zid7Td//nx+9atfUVZWBrSMNTB//nweffRRABoaGqioqGDIkCHs27ePsrIyampqeOWVV477eU1jG/z85z9vXt7ZmAlnn302O3fu5Je//CXXX399uD/PCSkRiEivN3nyZCorK8nPzyc3N5cbbriBFStWUFRUxLPPPsuECRPCOk5n+02ePJlvf/vbzJ07l8LCwuZG2gcffJDFixczdepUZs6cybp1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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'], label='accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation is not generalising well "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "563/563 [==============================] - 8s 13ms/step - loss: 0.7786 - accuracy: 0.8635\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.7785859107971191, 0.8634999990463257]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test2, y_test1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The above model is giving a very good accuracy of 86.34%\n",
    "* The loss is however a bit high and can be improved"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyperparameter tuning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, Dropout, MaxPooling2D\n",
    "\n",
    "# Initialize the model\n",
    "model = Sequential()\n",
    "\n",
    "# Add a Convolutional Layer with 32 filters of size 3X3 and activation function as 'relu' \n",
    "model.add(Conv2D(filters=32, kernel_size=3, activation=\"relu\", input_shape=(32, 32, 1)))\n",
    "\n",
    "# Add a Convolutional Layer with 32 filters of size 3X3 and activation function as 'relu' \n",
    "model.add(Conv2D(filters=32, kernel_size=3, activation=\"relu\"))\n",
    "\n",
    "# Add a MaxPooling Layer of size 2X2 \n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "# Apply Dropout with 0.2 probability \n",
    "model.add(Dropout(rate=0.3))\n",
    "\n",
    "# Flatten the layer\n",
    "model.add(Flatten())\n",
    "\n",
    "# Add Fully Connected Layer with 128 units and activation function as 'relu'\n",
    "model.add(Dense(128, activation=\"relu\"))\n",
    "\n",
    "#Add Fully Connected Layer with 10 units and activation function as 'softmax'\n",
    "model.add(Dense(10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1313/1313 [==============================] - 86s 65ms/step - loss: 0.9388 - accuracy: 0.7076 - val_loss: 0.5693 - val_accuracy: 0.8385\n",
      "Epoch 2/10\n",
      "1313/1313 [==============================] - 94s 72ms/step - loss: 0.5294 - accuracy: 0.8452 - val_loss: 0.4660 - val_accuracy: 0.8673\n",
      "Epoch 3/10\n",
      "1313/1313 [==============================] - 93s 71ms/step - loss: 0.4349 - accuracy: 0.8704 - val_loss: 0.4318 - val_accuracy: 0.8767\n",
      "Epoch 4/10\n",
      "1313/1313 [==============================] - 84s 64ms/step - loss: 0.3735 - accuracy: 0.8884 - val_loss: 0.4185 - val_accuracy: 0.8795\n",
      "Epoch 5/10\n",
      "1313/1313 [==============================] - 85s 64ms/step - loss: 0.3282 - accuracy: 0.9000 - val_loss: 0.4037 - val_accuracy: 0.8842\n",
      "Epoch 6/10\n",
      "1313/1313 [==============================] - 92s 70ms/step - loss: 0.2932 - accuracy: 0.9122 - val_loss: 0.3745 - val_accuracy: 0.8948\n",
      "Epoch 7/10\n",
      "1313/1313 [==============================] - 90s 68ms/step - loss: 0.2606 - accuracy: 0.9189 - val_loss: 0.3818 - val_accuracy: 0.8929\n",
      "Epoch 8/10\n",
      "1313/1313 [==============================] - 81s 62ms/step - loss: 0.2386 - accuracy: 0.9262 - val_loss: 0.3705 - val_accuracy: 0.8976\n"
     ]
    }
   ],
   "source": [
    "# Compile the model\n",
    "model.compile(loss=\"categorical_crossentropy\", metrics=[\"accuracy\"], optimizer=\"adam\")\n",
    "\n",
    "# Use earlystopping\n",
    "callback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=2, min_delta=0.01)\n",
    "\n",
    "# Fit the model\n",
    "history1=model.fit(x=X_train2, y=y_train1, batch_size=32, epochs=10, validation_data=(X_test2, y_test1), callbacks=[callback])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history1.history['accuracy'], label='accuracy')\n",
    "plt.plot(history1.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation is generalising well "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "563/563 [==============================] - 5s 9ms/step - loss: 0.3705 - accuracy: 0.8976\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.370500773191452, 0.8975555300712585]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test2, y_test1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We see that the accuracy has improved to 89.75% \n",
    "* The loss has also decreased \n",
    "* This is the prefered model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualising the outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Prediction(Model):\n",
    "    print(\"Test accuracy\",model.evaluate(X_test2, y_test1))\n",
    "    print(\"Train accuracy\",model.evaluate(X_train2, y_train1))\n",
    " \n",
    "    # PREDICTIONS\n",
    "Y_pred = model.predict(X_test2)\n",
    "Y_predicted = np.argmax(Y_pred, axis = 1) \n",
    "Y_true = np.argmax(y_test1, axis = 1) \n",
    "\n",
    "X_test_image = X_test2.reshape(X_test2.shape[0],32,32,1)\n",
    "\n",
    "def showImage(position):\n",
    "    print(\"Predicted\",Y_pred[position].argmax(),\"Actual \",y_test1[position].argmax())\n",
    "    plt.imshow((X_test_image[position]*255).astype(np.uint8),cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted 2 Actual  2\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "showImage(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted 1 Actual  1\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "showImage(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted 2 Actual  2\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "showImage(1500)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recommendation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The second model is more preffered as it gives a better accuracy on the test set ,has lesser loss and is generalising better with the validation set \n",
    "* The model has accurately classified all the images \n",
    "* resizing ,normalizing and one hot encoding has enabled to clean and process the data more efficiently \n",
    "* hyperparameter tuning has helped to reduce the loss and get a better accuracy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
